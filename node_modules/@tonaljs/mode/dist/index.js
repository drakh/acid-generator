"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var mode_exports = {};
__export(mode_exports, {
  all: () => all,
  default: () => mode_default,
  distance: () => distance,
  entries: () => entries,
  get: () => get,
  mode: () => mode,
  names: () => names,
  notes: () => notes,
  relativeTonic: () => relativeTonic,
  seventhChords: () => seventhChords,
  triads: () => triads
});
module.exports = __toCommonJS(mode_exports);
var import_collection = require("@tonaljs/collection");
var import_core = require("@tonaljs/core");
var import_interval = require("@tonaljs/interval");
var import_pcset = require("@tonaljs/pcset");
var import_scale_type = require("@tonaljs/scale-type");
var MODES = [
  [0, 2773, 0, "ionian", "", "Maj7", "major"],
  [1, 2902, 2, "dorian", "m", "m7"],
  [2, 3418, 4, "phrygian", "m", "m7"],
  [3, 2741, -1, "lydian", "", "Maj7"],
  [4, 2774, 1, "mixolydian", "", "7"],
  [5, 2906, 3, "aeolian", "m", "m7", "minor"],
  [6, 3434, 5, "locrian", "dim", "m7b5"]
];
var NoMode = {
  ...import_pcset.EmptyPcset,
  name: "",
  alt: 0,
  modeNum: NaN,
  triad: "",
  seventh: "",
  aliases: []
};
var modes = MODES.map(toMode);
var index = {};
modes.forEach((mode2) => {
  index[mode2.name] = mode2;
  mode2.aliases.forEach((alias) => {
    index[alias] = mode2;
  });
});
function get(name) {
  return typeof name === "string" ? index[name.toLowerCase()] || NoMode : name && name.name ? get(name.name) : NoMode;
}
var mode = (0, import_core.deprecate)("Mode.mode", "Mode.get", get);
function all() {
  return modes.slice();
}
var entries = (0, import_core.deprecate)("Mode.mode", "Mode.all", all);
function names() {
  return modes.map((mode2) => mode2.name);
}
function toMode(mode2) {
  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode2;
  const aliases = alias ? [alias] : [];
  const chroma = Number(setNum).toString(2);
  const intervals = (0, import_scale_type.get)(name).intervals;
  return {
    empty: false,
    intervals,
    modeNum,
    chroma,
    normalized: chroma,
    name,
    setNum,
    alt,
    triad,
    seventh,
    aliases
  };
}
function notes(modeName, tonic) {
  return get(modeName).intervals.map((ivl) => (0, import_core.transpose)(tonic, ivl));
}
function chords(chords2) {
  return (modeName, tonic) => {
    const mode2 = get(modeName);
    if (mode2.empty)
      return [];
    const triads2 = (0, import_collection.rotate)(mode2.modeNum, chords2);
    const tonics = mode2.intervals.map((i) => (0, import_core.transpose)(tonic, i));
    return triads2.map((triad, i) => tonics[i] + triad);
  };
}
var triads = chords(MODES.map((x) => x[4]));
var seventhChords = chords(MODES.map((x) => x[5]));
function distance(destination, source) {
  const from = get(source);
  const to = get(destination);
  if (from.empty || to.empty)
    return "";
  return (0, import_interval.simplify)((0, import_interval.transposeFifths)("1P", to.alt - from.alt));
}
function relativeTonic(destination, source, tonic) {
  return (0, import_core.transpose)(tonic, distance(destination, source));
}
var mode_default = {
  get,
  names,
  all,
  distance,
  relativeTonic,
  notes,
  triads,
  seventhChords,
  entries,
  mode
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  all,
  distance,
  entries,
  get,
  mode,
  names,
  notes,
  relativeTonic,
  seventhChords,
  triads
});
//# sourceMappingURL=index.js.map