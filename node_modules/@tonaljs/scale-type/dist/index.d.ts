import { Pcset, PcsetChroma, PcsetNum } from '@tonaljs/pcset';

/**
 * Properties for a scale in the scale dictionary. It's a pitch class set
 * properties with the following additional information:
 * - name: the scale name
 * - aliases: alternative list of names
 * - intervals: an array of interval names
 */
interface ScaleType extends Pcset {
    readonly name: string;
    readonly aliases: string[];
}
declare const NoScaleType: ScaleType;
type ScaleTypeName = string | PcsetChroma | PcsetNum;
declare function names(): string[];
/**
 * Given a scale name or chroma, return the scale properties
 *
 * @param {string} type - scale name or pitch class set chroma
 * @example
 * import { get } from 'tonaljs/scale-type'
 * get('major') // => { name: 'major', ... }
 */
declare function get(type: ScaleTypeName): ScaleType;
declare const scaleType: (this: unknown, ...args: unknown[]) => ScaleType;
/**
 * Return a list of all scale types
 */
declare function all(): ScaleType[];
declare const entries: (this: unknown, ...args: unknown[]) => ScaleType[];
/**
 * Keys used to reference scale types
 */
declare function keys(): string[];
/**
 * Clear the dictionary
 */
declare function removeAll(): void;
/**
 * Add a scale into dictionary
 * @param intervals
 * @param name
 * @param aliases
 */
declare function add(intervals: string[], name: string, aliases?: string[]): ScaleType;
declare function addAlias(scale: ScaleType, alias: string): void;
declare const _default: {
    names: typeof names;
    get: typeof get;
    all: typeof all;
    add: typeof add;
    removeAll: typeof removeAll;
    keys: typeof keys;
    entries: (this: unknown, ...args: unknown[]) => ScaleType[];
    scaleType: (this: unknown, ...args: unknown[]) => ScaleType;
};

export { NoScaleType, ScaleType, add, addAlias, all, _default as default, entries, get, keys, names, removeAll, scaleType };
