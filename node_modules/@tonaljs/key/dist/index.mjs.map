{"version":3,"sources":["../index.ts"],"sourcesContent":["import { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\nimport { transposeFifths } from \"@tonaljs/note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[]\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\")\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\")\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\"\n  )\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\"\n  )\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n"],"mappings":"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","names":["keyScale"]}