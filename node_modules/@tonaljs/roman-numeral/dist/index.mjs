// index.ts
import {
  accToAlt,
  altToAcc,
  deprecate,
  interval,
  isNamed,
  isPitch
} from "@tonaljs/core";
var NoRomanNumeral = { empty: true, name: "", chordType: "" };
var cache = {};
function get(src) {
  return typeof src === "string" ? cache[src] || (cache[src] = parse(src)) : typeof src === "number" ? get(NAMES[src] || "") : isPitch(src) ? fromPitch(src) : isNamed(src) ? get(src.name) : NoRomanNumeral;
}
var romanNumeral = deprecate(
  "RomanNumeral.romanNumeral",
  "RomanNumeral.get",
  get
);
function names(major = true) {
  return (major ? NAMES : NAMES_MINOR).slice();
}
function fromPitch(pitch) {
  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);
}
var REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;
function tokenize(str) {
  return REGEX.exec(str) || ["", "", "", ""];
}
var ROMANS = "I II III IV V VI VII";
var NAMES = ROMANS.split(" ");
var NAMES_MINOR = ROMANS.toLowerCase().split(" ");
function parse(src) {
  const [name, acc, roman, chordType] = tokenize(src);
  if (!roman) {
    return NoRomanNumeral;
  }
  const upperRoman = roman.toUpperCase();
  const step = NAMES.indexOf(upperRoman);
  const alt = accToAlt(acc);
  const dir = 1;
  return {
    empty: false,
    name,
    roman,
    interval: interval({ step, alt, dir }).name,
    acc,
    chordType,
    alt,
    step,
    major: roman === upperRoman,
    oct: 0,
    dir
  };
}
var roman_numeral_default = {
  names,
  get,
  romanNumeral
};
export {
  roman_numeral_default as default,
  get,
  names,
  tokenize
};
//# sourceMappingURL=index.mjs.map