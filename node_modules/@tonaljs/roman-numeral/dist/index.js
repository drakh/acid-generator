"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var roman_numeral_exports = {};
__export(roman_numeral_exports, {
  default: () => roman_numeral_default,
  get: () => get,
  names: () => names,
  tokenize: () => tokenize
});
module.exports = __toCommonJS(roman_numeral_exports);
var import_core = require("@tonaljs/core");
var NoRomanNumeral = { empty: true, name: "", chordType: "" };
var cache = {};
function get(src) {
  return typeof src === "string" ? cache[src] || (cache[src] = parse(src)) : typeof src === "number" ? get(NAMES[src] || "") : (0, import_core.isPitch)(src) ? fromPitch(src) : (0, import_core.isNamed)(src) ? get(src.name) : NoRomanNumeral;
}
var romanNumeral = (0, import_core.deprecate)(
  "RomanNumeral.romanNumeral",
  "RomanNumeral.get",
  get
);
function names(major = true) {
  return (major ? NAMES : NAMES_MINOR).slice();
}
function fromPitch(pitch) {
  return get((0, import_core.altToAcc)(pitch.alt) + NAMES[pitch.step]);
}
var REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;
function tokenize(str) {
  return REGEX.exec(str) || ["", "", "", ""];
}
var ROMANS = "I II III IV V VI VII";
var NAMES = ROMANS.split(" ");
var NAMES_MINOR = ROMANS.toLowerCase().split(" ");
function parse(src) {
  const [name, acc, roman, chordType] = tokenize(src);
  if (!roman) {
    return NoRomanNumeral;
  }
  const upperRoman = roman.toUpperCase();
  const step = NAMES.indexOf(upperRoman);
  const alt = (0, import_core.accToAlt)(acc);
  const dir = 1;
  return {
    empty: false,
    name,
    roman,
    interval: (0, import_core.interval)({ step, alt, dir }).name,
    acc,
    chordType,
    alt,
    step,
    major: roman === upperRoman,
    oct: 0,
    dir
  };
}
var roman_numeral_default = {
  names,
  get,
  romanNumeral
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  get,
  names,
  tokenize
});
//# sourceMappingURL=index.js.map