{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n *  Returns the calculated pattern of equally distributed pulses in total steps\n *  based on the euclidean rhythms algorithm described by Godfried Toussaint\n *\n *  @method  getPattern\n *  @param {Number} pulses Number of pulses in the pattern\n *  @param {Number} steps  Number of steps in the pattern (pattern length)\n */\nexport function getPattern(pulses: number, steps: number) {\n  if (pulses < 0 || steps < 0 || steps < pulses) {\n    return [];\n  }\n\n  // Create the two arrays\n  let first = new Array(pulses).fill([1]);\n  let second = new Array(steps - pulses).fill([0]);\n\n  let firstLength = first.length;\n  let minLength = Math.min(firstLength, second.length);\n\n  let loopThreshold = 0;\n  // Loop until at least one array has length gt 2 (1 for first loop)\n  while (minLength > loopThreshold) {\n    // Allow only loopThreshold to be zero on the first loop\n    if (loopThreshold === 0) {\n      loopThreshold = 1;\n    }\n\n    // For the minimum array loop and concat\n    for (let x = 0; x < minLength; x++) {\n      first[x] = [...first[x], ...second[x]];\n    }\n\n    // if the second was the bigger array, slice the remaining elements/arrays and update\n    if (minLength === firstLength) {\n      second = second.slice(minLength);\n    }\n    // Otherwise update the second (smallest array) with the remainders of the first\n    // and update the first array to include only the extended sub-arrays\n    else {\n      second = first.slice(minLength);\n      first = first.slice(0, minLength);\n    }\n    firstLength = first.length;\n    minLength = Math.min(firstLength, second.length);\n  }\n\n  // Build the final array\n  const pattern: number[] = [...first.flat(), ...second.flat()];\n\n  return pattern;\n}\n"],"mappings":";AAQO,SAAS,WAAW,QAAgB,OAAe;AACxD,MAAI,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAAQ;AAC7C,WAAO,CAAC;AAAA,EACV;AAGA,MAAI,QAAQ,IAAI,MAAM,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;AACtC,MAAI,SAAS,IAAI,MAAM,QAAQ,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;AAE/C,MAAI,cAAc,MAAM;AACxB,MAAI,YAAY,KAAK,IAAI,aAAa,OAAO,MAAM;AAEnD,MAAI,gBAAgB;AAEpB,SAAO,YAAY,eAAe;AAEhC,QAAI,kBAAkB,GAAG;AACvB,sBAAgB;AAAA,IAClB;AAGA,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,YAAM,KAAK,CAAC,GAAG,MAAM,IAAI,GAAG,OAAO,EAAE;AAAA,IACvC;AAGA,QAAI,cAAc,aAAa;AAC7B,eAAS,OAAO,MAAM,SAAS;AAAA,IACjC,OAGK;AACH,eAAS,MAAM,MAAM,SAAS;AAC9B,cAAQ,MAAM,MAAM,GAAG,SAAS;AAAA,IAClC;AACA,kBAAc,MAAM;AACpB,gBAAY,KAAK,IAAI,aAAa,OAAO,MAAM;AAAA,EACjD;AAGA,QAAM,UAAoB,CAAC,GAAG,MAAM,KAAK,GAAG,GAAG,OAAO,KAAK,CAAC;AAE5D,SAAO;AACT;","names":[]}