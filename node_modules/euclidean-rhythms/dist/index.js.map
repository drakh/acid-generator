{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n *  Returns the calculated pattern of equally distributed pulses in total steps\n *  based on the euclidean rhythms algorithm described by Godfried Toussaint\n *\n *  @method  getPattern\n *  @param {Number} pulses Number of pulses in the pattern\n *  @param {Number} steps  Number of steps in the pattern (pattern length)\n */\nexport function getPattern(pulses: number, steps: number) {\n  if (pulses < 0 || steps < 0 || steps < pulses) {\n    return [];\n  }\n\n  // Create the two arrays\n  let first = new Array(pulses).fill([1]);\n  let second = new Array(steps - pulses).fill([0]);\n\n  let firstLength = first.length;\n  let minLength = Math.min(firstLength, second.length);\n\n  let loopThreshold = 0;\n  // Loop until at least one array has length gt 2 (1 for first loop)\n  while (minLength > loopThreshold) {\n    // Allow only loopThreshold to be zero on the first loop\n    if (loopThreshold === 0) {\n      loopThreshold = 1;\n    }\n\n    // For the minimum array loop and concat\n    for (let x = 0; x < minLength; x++) {\n      first[x] = [...first[x], ...second[x]];\n    }\n\n    // if the second was the bigger array, slice the remaining elements/arrays and update\n    if (minLength === firstLength) {\n      second = second.slice(minLength);\n    }\n    // Otherwise update the second (smallest array) with the remainders of the first\n    // and update the first array to include only the extended sub-arrays\n    else {\n      second = first.slice(minLength);\n      first = first.slice(0, minLength);\n    }\n    firstLength = first.length;\n    minLength = Math.min(firstLength, second.length);\n  }\n\n  // Build the final array\n  const pattern: number[] = [...first.flat(), ...second.flat()];\n\n  return pattern;\n}\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,IAAA,eAAAC,EAAAH,GAQO,SAASE,EAAWE,EAAgBC,EAAe,CACxD,GAAID,EAAS,GAAKC,EAAQ,GAAKA,EAAQD,EACrC,MAAO,CAAC,EAIV,IAAIE,EAAQ,IAAI,MAAMF,CAAM,EAAE,KAAK,CAAC,CAAC,CAAC,EAClCG,EAAS,IAAI,MAAMF,EAAQD,CAAM,EAAE,KAAK,CAAC,CAAC,CAAC,EAE3CI,EAAcF,EAAM,OACpBG,EAAY,KAAK,IAAID,EAAaD,EAAO,MAAM,EAE/CG,EAAgB,EAEpB,KAAOD,EAAYC,GAAe,CAE5BA,IAAkB,IACpBA,EAAgB,GAIlB,QAASC,EAAI,EAAGA,EAAIF,EAAWE,IAC7BL,EAAMK,GAAK,CAAC,GAAGL,EAAMK,GAAI,GAAGJ,EAAOI,EAAE,EAInCF,IAAcD,EAChBD,EAASA,EAAO,MAAME,CAAS,GAK/BF,EAASD,EAAM,MAAMG,CAAS,EAC9BH,EAAQA,EAAM,MAAM,EAAGG,CAAS,GAElCD,EAAcF,EAAM,OACpBG,EAAY,KAAK,IAAID,EAAaD,EAAO,MAAM,CACjD,CAKA,MAF0B,CAAC,GAAGD,EAAM,KAAK,EAAG,GAAGC,EAAO,KAAK,CAAC,CAG9D","names":["src_exports","__export","getPattern","__toCommonJS","pulses","steps","first","second","firstLength","minLength","loopThreshold","x"]}