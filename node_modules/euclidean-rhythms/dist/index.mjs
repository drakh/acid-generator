// src/index.ts
function getPattern(pulses, steps) {
  if (pulses < 0 || steps < 0 || steps < pulses) {
    return [];
  }
  let first = new Array(pulses).fill([1]);
  let second = new Array(steps - pulses).fill([0]);
  let firstLength = first.length;
  let minLength = Math.min(firstLength, second.length);
  let loopThreshold = 0;
  while (minLength > loopThreshold) {
    if (loopThreshold === 0) {
      loopThreshold = 1;
    }
    for (let x = 0; x < minLength; x++) {
      first[x] = [...first[x], ...second[x]];
    }
    if (minLength === firstLength) {
      second = second.slice(minLength);
    } else {
      second = first.slice(minLength);
      first = first.slice(0, minLength);
    }
    firstLength = first.length;
    minLength = Math.min(firstLength, second.length);
  }
  const pattern = [...first.flat(), ...second.flat()];
  return pattern;
}
export {
  getPattern
};
//# sourceMappingURL=index.mjs.map