import * as _tonaljs_scale_type from '@tonaljs/scale-type';
export { default as ScaleType } from '@tonaljs/scale-type';
import * as _tonaljs_chord_type from '@tonaljs/chord-type';
export { default as ChordType } from '@tonaljs/chord-type';
import * as _tonaljs_pcset from '@tonaljs/pcset';
export { default as Pcset } from '@tonaljs/pcset';
export { default as AbcNotation } from '@tonaljs/abc-notation';
import * as array from '@tonaljs/array';
export { array as Array };
export { default as Chord } from '@tonaljs/chord';
export { default as Collection } from '@tonaljs/collection';
import * as Core from '@tonaljs/core';
export * from '@tonaljs/core';
export { Core };
export { default as DurationValue } from '@tonaljs/duration-value';
export { default as Interval } from '@tonaljs/interval';
export { default as Key } from '@tonaljs/key';
export { default as Midi } from '@tonaljs/midi';
export { default as Mode } from '@tonaljs/mode';
export { default as Note } from '@tonaljs/note';
export { default as Progression } from '@tonaljs/progression';
export { default as Range } from '@tonaljs/range';
export { default as RomanNumeral } from '@tonaljs/roman-numeral';
export { default as Scale } from '@tonaljs/scale';
export { default as TimeSignature } from '@tonaljs/time-signature';

declare const Tonal: typeof Core;
declare const PcSet: {
    get: typeof _tonaljs_pcset.get;
    chroma: (set: _tonaljs_pcset.Set) => string;
    num: (set: _tonaljs_pcset.Set) => number;
    intervals: (set: _tonaljs_pcset.Set) => string[];
    chromas: typeof _tonaljs_pcset.chromas;
    isSupersetOf: typeof _tonaljs_pcset.isSupersetOf;
    isSubsetOf: typeof _tonaljs_pcset.isSubsetOf;
    isNoteIncludedIn: typeof _tonaljs_pcset.isNoteIncludedIn;
    isEqual: typeof _tonaljs_pcset.isEqual;
    filter: typeof _tonaljs_pcset.filter;
    modes: typeof _tonaljs_pcset.modes;
    pcset: (this: unknown, ...args: unknown[]) => _tonaljs_pcset.Pcset;
};
declare const ChordDictionary: {
    names: typeof _tonaljs_chord_type.names;
    symbols: typeof _tonaljs_chord_type.symbols;
    get: typeof _tonaljs_chord_type.get;
    all: typeof _tonaljs_chord_type.all;
    add: typeof _tonaljs_chord_type.add;
    removeAll: typeof _tonaljs_chord_type.removeAll;
    keys: typeof _tonaljs_chord_type.keys;
    entries: (this: unknown, ...args: unknown[]) => _tonaljs_chord_type.ChordType[];
    chordType: (this: unknown, ...args: unknown[]) => _tonaljs_chord_type.ChordType;
};
declare const ScaleDictionary: {
    names: typeof _tonaljs_scale_type.names;
    get: typeof _tonaljs_scale_type.get;
    all: typeof _tonaljs_scale_type.all;
    add: typeof _tonaljs_scale_type.add;
    removeAll: typeof _tonaljs_scale_type.removeAll;
    keys: typeof _tonaljs_scale_type.keys;
    entries: (this: unknown, ...args: unknown[]) => _tonaljs_scale_type.ScaleType[];
    scaleType: (this: unknown, ...args: unknown[]) => _tonaljs_scale_type.ScaleType;
};

export { ChordDictionary, PcSet, ScaleDictionary, Tonal };
