"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var tonal_exports = {};
__export(tonal_exports, {
  AbcNotation: () => import_abc_notation.default,
  Array: () => Array,
  Chord: () => import_chord.default,
  ChordDictionary: () => ChordDictionary,
  ChordType: () => import_chord_type.default,
  Collection: () => import_collection.default,
  Core: () => Core,
  DurationValue: () => import_duration_value.default,
  Interval: () => import_interval.default,
  Key: () => import_key.default,
  Midi: () => import_midi.default,
  Mode: () => import_mode.default,
  Note: () => import_note.default,
  PcSet: () => PcSet,
  Pcset: () => import_pcset.default,
  Progression: () => import_progression.default,
  Range: () => import_range.default,
  RomanNumeral: () => import_roman_numeral.default,
  Scale: () => import_scale.default,
  ScaleDictionary: () => ScaleDictionary,
  ScaleType: () => import_scale_type.default,
  TimeSignature: () => import_time_signature.default,
  Tonal: () => Tonal
});
module.exports = __toCommonJS(tonal_exports);
var import_abc_notation = __toESM(require("@tonaljs/abc-notation"));
var Array = __toESM(require("@tonaljs/array"));
var import_chord = __toESM(require("@tonaljs/chord"));
var import_chord_type = __toESM(require("@tonaljs/chord-type"));
var import_collection = __toESM(require("@tonaljs/collection"));
var Core = __toESM(require("@tonaljs/core"));
var import_duration_value = __toESM(require("@tonaljs/duration-value"));
var import_interval = __toESM(require("@tonaljs/interval"));
var import_key = __toESM(require("@tonaljs/key"));
var import_midi = __toESM(require("@tonaljs/midi"));
var import_mode = __toESM(require("@tonaljs/mode"));
var import_note = __toESM(require("@tonaljs/note"));
var import_pcset = __toESM(require("@tonaljs/pcset"));
var import_progression = __toESM(require("@tonaljs/progression"));
var import_range = __toESM(require("@tonaljs/range"));
var import_roman_numeral = __toESM(require("@tonaljs/roman-numeral"));
var import_scale = __toESM(require("@tonaljs/scale"));
var import_scale_type = __toESM(require("@tonaljs/scale-type"));
var import_time_signature = __toESM(require("@tonaljs/time-signature"));
__reExport(tonal_exports, require("@tonaljs/core"), module.exports);
var Tonal = Core;
var PcSet = import_pcset.default;
var ChordDictionary = import_chord_type.default;
var ScaleDictionary = import_scale_type.default;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AbcNotation,
  Array,
  Chord,
  ChordDictionary,
  ChordType,
  Collection,
  Core,
  DurationValue,
  Interval,
  Key,
  Midi,
  Mode,
  Note,
  PcSet,
  Pcset,
  Progression,
  Range,
  RomanNumeral,
  Scale,
  ScaleDictionary,
  ScaleType,
  TimeSignature,
  Tonal,
  ...require("@tonaljs/core")
});
//# sourceMappingURL=index.js.map